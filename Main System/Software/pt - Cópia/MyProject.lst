;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 20/06/2021 19:53:03
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EFE9  	GOTO        466
_interrupt:
;MyProject.c,56 :: 		void interrupt()
;MyProject.c,60 :: 		if(TMR0IF_bit)                                                            //Houve overflow do Timer0?
0x0008	0xA4F2      	BTFSS       TMR0IF_bit, BitPos(TMR0IF_bit+0) 
0x000A	0xD007      	BRA         L_interrupt0
;MyProject.c,62 :: 		TMR0IF_bit = 0x00;                                                     //Limpa Flag
0x000C	0x94F2      	BCF         TMR0IF_bit, BitPos(TMR0IF_bit+0) 
;MyProject.c,64 :: 		TMR0L      = byteH;                                                    //Reinicia byte menos sifnificativo do Timer0
0x000E	0xFFD6C015  	MOVFF       _byteH, TMR0L
;MyProject.c,65 :: 		TMR0H      = byteL;                                                    //Reinicia byte mais significativo do Timer0
0x0012	0xFFD7C018  	MOVFF       _byteL, TMR0H
;MyProject.c,67 :: 		vel1       = ~vel1;                                                    //Gera clock para velocidade do motor1
0x0016	0x7C8C      	BTG         LATD6_bit, BitPos(LATD6_bit+0) 
;MyProject.c,68 :: 		vel2       = ~vel2;                                                    //Gera clock para velocidade do motor2
0x0018	0x7E8C      	BTG         LATD7_bit, BitPos(LATD7_bit+0) 
;MyProject.c,77 :: 		} //end if TMR0IF
L_interrupt0:
;MyProject.c,78 :: 		} //end interrupt
L_end_interrupt:
L__interrupt32:
0x001A	0x0011      	RETFIE      1
; end of _interrupt
_virardireita:
;MyProject.c,271 :: 		void virardireita()                                                             //Função para virar para a direita
;MyProject.c,273 :: 		TMR0ON_bit = 0x00;
0x001C	0x9ED5      	BCF         TMR0ON_bit, BitPos(TMR0ON_bit+0) 
;MyProject.c,274 :: 		vel1 = 0x00;
0x001E	0x9C8C      	BCF         LATD6_bit, BitPos(LATD6_bit+0) 
;MyProject.c,275 :: 		vel2 = 0x00;
0x0020	0x9E8C      	BCF         LATD7_bit, BitPos(LATD7_bit+0) 
;MyProject.c,276 :: 		delay_ms(1500);                                                          //Robo STOP
0x0022	0x0E27      	MOVLW       39
0x0024	0x6E0B      	MOVWF       R11, 0
0x0026	0x0E0D      	MOVLW       13
0x0028	0x6E0C      	MOVWF       R12, 0
0x002A	0x0E26      	MOVLW       38
0x002C	0x6E0D      	MOVWF       R13, 0
L_virardireita17:
0x002E	0x2E0D      	DECFSZ      R13, 1, 0
0x0030	0xD7FE      	BRA         L_virardireita17
0x0032	0x2E0C      	DECFSZ      R12, 1, 0
0x0034	0xD7FC      	BRA         L_virardireita17
0x0036	0x2E0B      	DECFSZ      R11, 1, 0
0x0038	0xD7FA      	BRA         L_virardireita17
0x003A	0x0000      	NOP
;MyProject.c,278 :: 		dir1 = 0x01;
0x003C	0x808C      	BSF         LATD0_bit, BitPos(LATD0_bit+0) 
;MyProject.c,279 :: 		dir2 = 0x00;
0x003E	0x928C      	BCF         LATD1_bit, BitPos(LATD1_bit+0) 
;MyProject.c,280 :: 		TMR0ON_bit = 0x01;
0x0040	0x8ED5      	BSF         TMR0ON_bit, BitPos(TMR0ON_bit+0) 
;MyProject.c,281 :: 		delay_ms(1200);                                                          //Robo anda para trás
0x0042	0x0E1F      	MOVLW       31
0x0044	0x6E0B      	MOVWF       R11, 0
0x0046	0x0E71      	MOVLW       113
0x0048	0x6E0C      	MOVWF       R12, 0
0x004A	0x0E1E      	MOVLW       30
0x004C	0x6E0D      	MOVWF       R13, 0
L_virardireita18:
0x004E	0x2E0D      	DECFSZ      R13, 1, 0
0x0050	0xD7FE      	BRA         L_virardireita18
0x0052	0x2E0C      	DECFSZ      R12, 1, 0
0x0054	0xD7FC      	BRA         L_virardireita18
0x0056	0x2E0B      	DECFSZ      R11, 1, 0
0x0058	0xD7FA      	BRA         L_virardireita18
0x005A	0x0000      	NOP
;MyProject.c,283 :: 		dir1 = 0x01;
0x005C	0x808C      	BSF         LATD0_bit, BitPos(LATD0_bit+0) 
;MyProject.c,284 :: 		dir2 = 0x01;
0x005E	0x828C      	BSF         LATD1_bit, BitPos(LATD1_bit+0) 
;MyProject.c,285 :: 		delay_ms (4400);                                                         //Desvio Robo
0x0060	0x0E70      	MOVLW       112
0x0062	0x6E0B      	MOVWF       R11, 0
0x0064	0x0E9C      	MOVLW       156
0x0066	0x6E0C      	MOVWF       R12, 0
0x0068	0x0E21      	MOVLW       33
0x006A	0x6E0D      	MOVWF       R13, 0
L_virardireita19:
0x006C	0x2E0D      	DECFSZ      R13, 1, 0
0x006E	0xD7FE      	BRA         L_virardireita19
0x0070	0x2E0C      	DECFSZ      R12, 1, 0
0x0072	0xD7FC      	BRA         L_virardireita19
0x0074	0x2E0B      	DECFSZ      R11, 1, 0
0x0076	0xD7FA      	BRA         L_virardireita19
;MyProject.c,287 :: 		dir1 = 0x00;
0x0078	0x908C      	BCF         LATD0_bit, BitPos(LATD0_bit+0) 
;MyProject.c,288 :: 		dir2 = 0x01;
0x007A	0x828C      	BSF         LATD1_bit, BitPos(LATD1_bit+0) 
;MyProject.c,289 :: 		delay_ms(4000);                                                          //Anda em frente
0x007C	0x0E66      	MOVLW       102
0x007E	0x6E0B      	MOVWF       R11, 0
0x0080	0x0E76      	MOVLW       118
0x0082	0x6E0C      	MOVWF       R12, 0
0x0084	0x0EC1      	MOVLW       193
0x0086	0x6E0D      	MOVWF       R13, 0
L_virardireita20:
0x0088	0x2E0D      	DECFSZ      R13, 1, 0
0x008A	0xD7FE      	BRA         L_virardireita20
0x008C	0x2E0C      	DECFSZ      R12, 1, 0
0x008E	0xD7FC      	BRA         L_virardireita20
0x0090	0x2E0B      	DECFSZ      R11, 1, 0
0x0092	0xD7FA      	BRA         L_virardireita20
;MyProject.c,298 :: 		dir1 = 0x01;
0x0094	0x808C      	BSF         LATD0_bit, BitPos(LATD0_bit+0) 
;MyProject.c,299 :: 		dir2 = 0x01;
0x0096	0x828C      	BSF         LATD1_bit, BitPos(LATD1_bit+0) 
;MyProject.c,300 :: 		delay_ms (4400);                                                         //Desvio Robo
0x0098	0x0E70      	MOVLW       112
0x009A	0x6E0B      	MOVWF       R11, 0
0x009C	0x0E9C      	MOVLW       156
0x009E	0x6E0C      	MOVWF       R12, 0
0x00A0	0x0E21      	MOVLW       33
0x00A2	0x6E0D      	MOVWF       R13, 0
L_virardireita21:
0x00A4	0x2E0D      	DECFSZ      R13, 1, 0
0x00A6	0xD7FE      	BRA         L_virardireita21
0x00A8	0x2E0C      	DECFSZ      R12, 1, 0
0x00AA	0xD7FC      	BRA         L_virardireita21
0x00AC	0x2E0B      	DECFSZ      R11, 1, 0
0x00AE	0xD7FA      	BRA         L_virardireita21
;MyProject.c,303 :: 		if(sens1)                                                                //Mesmo depois do desvio tem obstáculo?
0x00B0	0xA483      	BTFSS       RD2_bit, BitPos(RD2_bit+0) 
0x00B2	0xD010      	BRA         L_virardireita22
;MyProject.c,305 :: 		dir1= 0x01;
0x00B4	0x808C      	BSF         LATD0_bit, BitPos(LATD0_bit+0) 
;MyProject.c,306 :: 		dir2 = 0x01;
0x00B6	0x828C      	BSF         LATD1_bit, BitPos(LATD1_bit+0) 
;MyProject.c,307 :: 		delay_ms (10000);                                                       //Roda 180 graus antes de voltar à normalidade
0x00B8	0x0EFE      	MOVLW       254
0x00BA	0x6E0B      	MOVWF       R11, 0
0x00BC	0x0EA7      	MOVLW       167
0x00BE	0x6E0C      	MOVWF       R12, 0
0x00C0	0x0E65      	MOVLW       101
0x00C2	0x6E0D      	MOVWF       R13, 0
L_virardireita23:
0x00C4	0x2E0D      	DECFSZ      R13, 1, 0
0x00C6	0xD7FE      	BRA         L_virardireita23
0x00C8	0x2E0C      	DECFSZ      R12, 1, 0
0x00CA	0xD7FC      	BRA         L_virardireita23
0x00CC	0x2E0B      	DECFSZ      R11, 1, 0
0x00CE	0xD7FA      	BRA         L_virardireita23
0x00D0	0x0000      	NOP
0x00D2	0x0000      	NOP
;MyProject.c,308 :: 		}
L_virardireita22:
;MyProject.c,310 :: 		dir1 = 0x00;
0x00D4	0x908C      	BCF         LATD0_bit, BitPos(LATD0_bit+0) 
;MyProject.c,311 :: 		dir2 = 0x01;                                                             //Anda em frente
0x00D6	0x828C      	BSF         LATD1_bit, BitPos(LATD1_bit+0) 
;MyProject.c,319 :: 		}
L_end_virardireita:
0x00D8	0x0012      	RETURN      0
; end of _virardireita
_viraresquerda:
;MyProject.c,323 :: 		void viraresquerda()                                                            //Função para virar para a esquerda
;MyProject.c,325 :: 		TMR0ON_bit = 0x00;
0x00DA	0x9ED5      	BCF         TMR0ON_bit, BitPos(TMR0ON_bit+0) 
;MyProject.c,326 :: 		vel1 = 0x00;
0x00DC	0x9C8C      	BCF         LATD6_bit, BitPos(LATD6_bit+0) 
;MyProject.c,327 :: 		vel2 = 0x00;
0x00DE	0x9E8C      	BCF         LATD7_bit, BitPos(LATD7_bit+0) 
;MyProject.c,328 :: 		delay_ms(1500);                                                          //Robo STOP
0x00E0	0x0E27      	MOVLW       39
0x00E2	0x6E0B      	MOVWF       R11, 0
0x00E4	0x0E0D      	MOVLW       13
0x00E6	0x6E0C      	MOVWF       R12, 0
0x00E8	0x0E26      	MOVLW       38
0x00EA	0x6E0D      	MOVWF       R13, 0
L_viraresquerda24:
0x00EC	0x2E0D      	DECFSZ      R13, 1, 0
0x00EE	0xD7FE      	BRA         L_viraresquerda24
0x00F0	0x2E0C      	DECFSZ      R12, 1, 0
0x00F2	0xD7FC      	BRA         L_viraresquerda24
0x00F4	0x2E0B      	DECFSZ      R11, 1, 0
0x00F6	0xD7FA      	BRA         L_viraresquerda24
0x00F8	0x0000      	NOP
;MyProject.c,330 :: 		dir1 = 0x01;
0x00FA	0x808C      	BSF         LATD0_bit, BitPos(LATD0_bit+0) 
;MyProject.c,331 :: 		dir2 = 0x00;
0x00FC	0x928C      	BCF         LATD1_bit, BitPos(LATD1_bit+0) 
;MyProject.c,332 :: 		TMR0ON_bit = 0x01;
0x00FE	0x8ED5      	BSF         TMR0ON_bit, BitPos(TMR0ON_bit+0) 
;MyProject.c,333 :: 		delay_ms(1200);                                                          //Robo anda para trás
0x0100	0x0E1F      	MOVLW       31
0x0102	0x6E0B      	MOVWF       R11, 0
0x0104	0x0E71      	MOVLW       113
0x0106	0x6E0C      	MOVWF       R12, 0
0x0108	0x0E1E      	MOVLW       30
0x010A	0x6E0D      	MOVWF       R13, 0
L_viraresquerda25:
0x010C	0x2E0D      	DECFSZ      R13, 1, 0
0x010E	0xD7FE      	BRA         L_viraresquerda25
0x0110	0x2E0C      	DECFSZ      R12, 1, 0
0x0112	0xD7FC      	BRA         L_viraresquerda25
0x0114	0x2E0B      	DECFSZ      R11, 1, 0
0x0116	0xD7FA      	BRA         L_viraresquerda25
0x0118	0x0000      	NOP
;MyProject.c,335 :: 		dir1 = 0x00;
0x011A	0x908C      	BCF         LATD0_bit, BitPos(LATD0_bit+0) 
;MyProject.c,336 :: 		dir2 = 0x00;
0x011C	0x928C      	BCF         LATD1_bit, BitPos(LATD1_bit+0) 
;MyProject.c,337 :: 		delay_ms (4400);                                                         //Desvio Robo
0x011E	0x0E70      	MOVLW       112
0x0120	0x6E0B      	MOVWF       R11, 0
0x0122	0x0E9C      	MOVLW       156
0x0124	0x6E0C      	MOVWF       R12, 0
0x0126	0x0E21      	MOVLW       33
0x0128	0x6E0D      	MOVWF       R13, 0
L_viraresquerda26:
0x012A	0x2E0D      	DECFSZ      R13, 1, 0
0x012C	0xD7FE      	BRA         L_viraresquerda26
0x012E	0x2E0C      	DECFSZ      R12, 1, 0
0x0130	0xD7FC      	BRA         L_viraresquerda26
0x0132	0x2E0B      	DECFSZ      R11, 1, 0
0x0134	0xD7FA      	BRA         L_viraresquerda26
;MyProject.c,339 :: 		dir1 = 0x00;
0x0136	0x908C      	BCF         LATD0_bit, BitPos(LATD0_bit+0) 
;MyProject.c,340 :: 		dir2 = 0x01;
0x0138	0x828C      	BSF         LATD1_bit, BitPos(LATD1_bit+0) 
;MyProject.c,341 :: 		delay_ms(4000);                                                          //Anda em frente
0x013A	0x0E66      	MOVLW       102
0x013C	0x6E0B      	MOVWF       R11, 0
0x013E	0x0E76      	MOVLW       118
0x0140	0x6E0C      	MOVWF       R12, 0
0x0142	0x0EC1      	MOVLW       193
0x0144	0x6E0D      	MOVWF       R13, 0
L_viraresquerda27:
0x0146	0x2E0D      	DECFSZ      R13, 1, 0
0x0148	0xD7FE      	BRA         L_viraresquerda27
0x014A	0x2E0C      	DECFSZ      R12, 1, 0
0x014C	0xD7FC      	BRA         L_viraresquerda27
0x014E	0x2E0B      	DECFSZ      R11, 1, 0
0x0150	0xD7FA      	BRA         L_viraresquerda27
;MyProject.c,350 :: 		dir1 = 0x00;
0x0152	0x908C      	BCF         LATD0_bit, BitPos(LATD0_bit+0) 
;MyProject.c,351 :: 		dir2 = 0x00;
0x0154	0x928C      	BCF         LATD1_bit, BitPos(LATD1_bit+0) 
;MyProject.c,352 :: 		delay_ms (4400);                                                         //Desvio Robo
0x0156	0x0E70      	MOVLW       112
0x0158	0x6E0B      	MOVWF       R11, 0
0x015A	0x0E9C      	MOVLW       156
0x015C	0x6E0C      	MOVWF       R12, 0
0x015E	0x0E21      	MOVLW       33
0x0160	0x6E0D      	MOVWF       R13, 0
L_viraresquerda28:
0x0162	0x2E0D      	DECFSZ      R13, 1, 0
0x0164	0xD7FE      	BRA         L_viraresquerda28
0x0166	0x2E0C      	DECFSZ      R12, 1, 0
0x0168	0xD7FC      	BRA         L_viraresquerda28
0x016A	0x2E0B      	DECFSZ      R11, 1, 0
0x016C	0xD7FA      	BRA         L_viraresquerda28
;MyProject.c,354 :: 		if(sens1)                                                                //Mesmo depois do desvio tem obstáculo?
0x016E	0xA483      	BTFSS       RD2_bit, BitPos(RD2_bit+0) 
0x0170	0xD010      	BRA         L_viraresquerda29
;MyProject.c,356 :: 		dir1= 0x00;
0x0172	0x908C      	BCF         LATD0_bit, BitPos(LATD0_bit+0) 
;MyProject.c,357 :: 		dir2 = 0x00;
0x0174	0x928C      	BCF         LATD1_bit, BitPos(LATD1_bit+0) 
;MyProject.c,358 :: 		delay_ms (10000);                                                       //Roda 180 graus antes de voltar à normalidade
0x0176	0x0EFE      	MOVLW       254
0x0178	0x6E0B      	MOVWF       R11, 0
0x017A	0x0EA7      	MOVLW       167
0x017C	0x6E0C      	MOVWF       R12, 0
0x017E	0x0E65      	MOVLW       101
0x0180	0x6E0D      	MOVWF       R13, 0
L_viraresquerda30:
0x0182	0x2E0D      	DECFSZ      R13, 1, 0
0x0184	0xD7FE      	BRA         L_viraresquerda30
0x0186	0x2E0C      	DECFSZ      R12, 1, 0
0x0188	0xD7FC      	BRA         L_viraresquerda30
0x018A	0x2E0B      	DECFSZ      R11, 1, 0
0x018C	0xD7FA      	BRA         L_viraresquerda30
0x018E	0x0000      	NOP
0x0190	0x0000      	NOP
;MyProject.c,359 :: 		}
L_viraresquerda29:
;MyProject.c,361 :: 		dir1 = 0x00;
0x0192	0x908C      	BCF         LATD0_bit, BitPos(LATD0_bit+0) 
;MyProject.c,362 :: 		dir2 = 0x01;                                                             //Anda em frente
0x0194	0x828C      	BSF         LATD1_bit, BitPos(LATD1_bit+0) 
;MyProject.c,370 :: 		}
L_end_viraresquerda:
0x0196	0x0012      	RETURN      0
; end of _viraresquerda
_par_impar_test:
;MyProject.c,257 :: 		int par_impar_test ()
;MyProject.c,259 :: 		if(cont % 2 == 0)                                                              //O número é par?
0x0198	0x0E01      	MOVLW       1
0x019A	0x1416      	ANDWF       _cont, 0 
0x019C	0x6E01      	MOVWF       R1 
0x019E	0xF002C017  	MOVFF       _cont+1, R2
0x01A2	0x0E00      	MOVLW       0
0x01A4	0x1602      	ANDWF       R2, 1 
0x01A6	0x0E00      	MOVLW       0
0x01A8	0x1802      	XORWF       R2, 0 
0x01AA	0xE102      	BNZ         L__par_impar_test40
0x01AC	0x0E00      	MOVLW       0
0x01AE	0x1801      	XORWF       R1, 0 
L__par_impar_test40:
0x01B0	0xE103      	BNZ         L_par_impar_test15
;MyProject.c,261 :: 		return 0;                                                                     //Retorna 0
0x01B2	0x6A00      	CLRF        R0 
0x01B4	0x6A01      	CLRF        R1 
0x01B6	0xD004      	BRA         L_end_par_impar_test
;MyProject.c,262 :: 		}
L_par_impar_test15:
;MyProject.c,265 :: 		return 1;                                                                     //Retorna 1
0x01B8	0x0E01      	MOVLW       1
0x01BA	0x6E00      	MOVWF       R0 
0x01BC	0x0E00      	MOVLW       0
0x01BE	0x6E01      	MOVWF       R1 
;MyProject.c,267 :: 		}
L_end_par_impar_test:
0x01C0	0x0012      	RETURN      0
; end of _par_impar_test
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x01C2	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x01C4	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x01C8	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x01CA	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x01CC	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x01CE	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x01D0	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x01D2	0x0E77      	MOVLW       119
0x01D4	0x6E15      	MOVWF       _byteH 
0x01D6	0x6A16      	CLRF        _cont 
0x01D8	0x6A17      	CLRF        23 
0x01DA	0x0E48      	MOVLW       72
0x01DC	0x6E18      	MOVWF       _byteL 
;MyProject.c,82 :: 		void main()
;MyProject.c,85 :: 		INTCON        = 0xA0;                                                      //Habilita interrupção global e interrupção do Timer0
0x01DE	0x0EA0      	MOVLW       160
0x01E0	0x6EF2      	MOVWF       INTCON 
;MyProject.c,89 :: 		TMR0ON_bit       = 0x01;                                                   //bit 7: liga o Timer0
0x01E2	0x8ED5      	BSF         TMR0ON_bit, BitPos(TMR0ON_bit+0) 
;MyProject.c,90 :: 		T08BIT_bit       = 0x00;                                                   //bit 6: habilita o modo de 16 bits para o Timer0
0x01E4	0x9CD5      	BCF         T08BIT_bit, BitPos(T08BIT_bit+0) 
;MyProject.c,91 :: 		T0CS_bit         = 0x00;                                                   //bit 5: timer0 incrementa com o ciclo de máquina
0x01E6	0x9AD5      	BCF         T0CS_bit, BitPos(T0CS_bit+0) 
;MyProject.c,92 :: 		PSA_bit          = 0x01;                                                   //bit 3: timer0 sem prescaler (1:1)
0x01E8	0x86D5      	BSF         PSA_bit, BitPos(PSA_bit+0) 
;MyProject.c,98 :: 		TMR0L    = 0x48;                                                           //byte menos significativo      0x48
0x01EA	0x0E48      	MOVLW       72
0x01EC	0x6ED6      	MOVWF       TMR0L 
;MyProject.c,99 :: 		TMR0H    = 0x77;                                                           //byte mais significativo       0x77
0x01EE	0x0E77      	MOVLW       119
0x01F0	0x6ED7      	MOVWF       TMR0H 
;MyProject.c,102 :: 		TRISA    = 0xFF;
0x01F2	0x0EFF      	MOVLW       255
0x01F4	0x6E92      	MOVWF       TRISA 
;MyProject.c,103 :: 		ADCON0   = 0x01;                                                           //Ligar o conversor A/C
0x01F6	0x0E01      	MOVLW       1
0x01F8	0x6EC2      	MOVWF       ADCON0 
;MyProject.c,104 :: 		ADCON1   = 0x0E;                                                           //Apenas o AN0 como analógico
0x01FA	0x0E0E      	MOVLW       14
0x01FC	0x6EC1      	MOVWF       ADCON1 
;MyProject.c,105 :: 		ADCON2   = 0x18;
0x01FE	0x0E18      	MOVLW       24
0x0200	0x6EC0      	MOVWF       ADCON2 
;MyProject.c,119 :: 		TRISB   = 0xC0;                                                            //Configura IOs no PORTB
0x0202	0x0EC0      	MOVLW       192
0x0204	0x6E93      	MOVWF       TRISB 
;MyProject.c,120 :: 		PORTB   = 0xC0;                                                            //Inicializa PORTB
0x0206	0x0EC0      	MOVLW       192
0x0208	0x6E81      	MOVWF       PORTB 
;MyProject.c,121 :: 		TRISD   = 0x3C;                                                            //Configura IOs no PORTD
0x020A	0x0E3C      	MOVLW       60
0x020C	0x6E95      	MOVWF       TRISD 
;MyProject.c,122 :: 		PORTD   = 0x3C;                                                            //Inicializa PORTD
0x020E	0x0E3C      	MOVLW       60
0x0210	0x6E83      	MOVWF       PORTD 
;MyProject.c,123 :: 		ADCON1  = 0x0F;                                                            //Configura os pinos do PORTB como digitais
0x0212	0x0E0F      	MOVLW       15
0x0214	0x6EC1      	MOVWF       ADCON1 
;MyProject.c,127 :: 		byteH  = 0xB4;                                                            //130Hz
0x0216	0x0EB4      	MOVLW       180
0x0218	0x6E15      	MOVWF       _byteH 
;MyProject.c,128 :: 		byteL  = 0xE1;
0x021A	0x0EE1      	MOVLW       225
0x021C	0x6E18      	MOVWF       _byteL 
;MyProject.c,147 :: 		dir1 = 0x00;                                                              //Define o bit de direção inicial
0x021E	0x908C      	BCF         LATD0_bit, BitPos(LATD0_bit+0) 
;MyProject.c,148 :: 		dir2 = 0x01;                                                              //Define o bit de direção inicial
0x0220	0x828C      	BSF         LATD1_bit, BitPos(LATD1_bit+0) 
;MyProject.c,156 :: 		while(1)
L_main1:
;MyProject.c,160 :: 		if (sens1)                                                                 //Detetou Obstáculo?
0x0222	0xA483      	BTFSS       RD2_bit, BitPos(RD2_bit+0) 
0x0224	0xD01A      	BRA         L_main3
;MyProject.c,162 :: 		cont += 1;                                                            //Incrementa o contador
0x0226	0x4A16      	INFSNZ      _cont, 1 
0x0228	0x2A17      	INCF        _cont+1, 1 
;MyProject.c,163 :: 		parouimpar = par_impar_test();                                        //Confirma se o número do contador é par ou impar
0x022A	0xDFB6      	RCALL       _par_impar_test
0x022C	0xF01BC000  	MOVFF       R0, _parouimpar
0x0230	0xF01CC001  	MOVFF       R1, _parouimpar+1
;MyProject.c,165 :: 		switch(parouimpar)                                                    //switch
0x0234	0xD005      	BRA         L_main4
;MyProject.c,167 :: 		case 0:                                                              //Se for par
L_main6:
;MyProject.c,168 :: 		virardireita();                                                 //Vira para a direita
0x0236	0xDEF2      	RCALL       _virardireita
;MyProject.c,169 :: 		break;
0x0238	0xD010      	BRA         L_main5
;MyProject.c,171 :: 		case 1:                                                              //Se for impar
L_main7:
;MyProject.c,172 :: 		viraresquerda();                                                //Vira para a esquerda
0x023A	0xDF4F      	RCALL       _viraresquerda
;MyProject.c,173 :: 		break;
0x023C	0xD00E      	BRA         L_main5
;MyProject.c,175 :: 		default:                                                             //Se não houver retorno não faz nada
L_main8:
;MyProject.c,176 :: 		break;
0x023E	0xD00D      	BRA         L_main5
;MyProject.c,177 :: 		} //end switch
L_main4:
0x0240	0x0E00      	MOVLW       0
0x0242	0x181C      	XORWF       _parouimpar+1, 0 
0x0244	0xE102      	BNZ         L__main34
0x0246	0x0E00      	MOVLW       0
0x0248	0x181B      	XORWF       _parouimpar, 0 
L__main34:
0x024A	0xE0F5      	BZ          L_main6
0x024C	0x0E00      	MOVLW       0
0x024E	0x181C      	XORWF       _parouimpar+1, 0 
0x0250	0xE102      	BNZ         L__main35
0x0252	0x0E01      	MOVLW       1
0x0254	0x181B      	XORWF       _parouimpar, 0 
L__main35:
0x0256	0xE0F1      	BZ          L_main7
0x0258	0xD7F2      	BRA         L_main8
L_main5:
;MyProject.c,178 :: 		} //end if
L_main3:
;MyProject.c,180 :: 		if (!sens2)                                                                //O sensor deixou de detetar chão?
0x025A	0xB683      	BTFSC       RD3_bit, BitPos(RD3_bit+0) 
0x025C	0xD01A      	BRA         L_main9
;MyProject.c,183 :: 		cont += 1;                                                                //Incrementa o contador
0x025E	0x4A16      	INFSNZ      _cont, 1 
0x0260	0x2A17      	INCF        _cont+1, 1 
;MyProject.c,184 :: 		parouimpar2 = par_impar_test();                                           //Confirma se o número do contador é par ou impar
0x0262	0xDF9A      	RCALL       _par_impar_test
0x0264	0xF019C000  	MOVFF       R0, _parouimpar2
0x0268	0xF01AC001  	MOVFF       R1, _parouimpar2+1
;MyProject.c,186 :: 		switch(parouimpar2)                                                       //switch
0x026C	0xD005      	BRA         L_main10
;MyProject.c,188 :: 		case 0:                                                                  //Se for par
L_main12:
;MyProject.c,189 :: 		viraresquerda();                                                    //Vira para a esquerda
0x026E	0xDF35      	RCALL       _viraresquerda
;MyProject.c,190 :: 		break;
0x0270	0xD010      	BRA         L_main11
;MyProject.c,192 :: 		case 1:                                                                  //Se for impar
L_main13:
;MyProject.c,193 :: 		virardireita();                                                     //Vira para a direita
0x0272	0xDED4      	RCALL       _virardireita
;MyProject.c,194 :: 		break;
0x0274	0xD00E      	BRA         L_main11
;MyProject.c,195 :: 		default:                                                                 //Se não houver retorno não faz nada
L_main14:
;MyProject.c,196 :: 		break;
0x0276	0xD00D      	BRA         L_main11
;MyProject.c,197 :: 		}
L_main10:
0x0278	0x0E00      	MOVLW       0
0x027A	0x181A      	XORWF       _parouimpar2+1, 0 
0x027C	0xE102      	BNZ         L__main36
0x027E	0x0E00      	MOVLW       0
0x0280	0x1819      	XORWF       _parouimpar2, 0 
L__main36:
0x0282	0xE0F5      	BZ          L_main12
0x0284	0x0E00      	MOVLW       0
0x0286	0x181A      	XORWF       _parouimpar2+1, 0 
0x0288	0xE102      	BNZ         L__main37
0x028A	0x0E01      	MOVLW       1
0x028C	0x1819      	XORWF       _parouimpar2, 0 
L__main37:
0x028E	0xE0F1      	BZ          L_main13
0x0290	0xD7F2      	BRA         L_main14
L_main11:
;MyProject.c,199 :: 		}  //end if
L_main9:
;MyProject.c,202 :: 		} //end while
0x0292	0xD7C7      	BRA         L_main1
;MyProject.c,203 :: 		} //end main
L_end_main:
0x0294	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008      [20]    _interrupt
0x001C     [190]    _virardireita
0x00DA     [190]    _viraresquerda
0x0198      [42]    _par_impar_test
0x01C2      [16]    ___CC2DW
0x01D2     [196]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [1]    _byteH
0x0016       [2]    _cont
0x0018       [1]    _byteL
0x0019       [2]    _parouimpar2
0x001B       [2]    _parouimpar
0x0F81       [1]    PORTB
0x0F83       [1]    PORTD
0x0F83       [0]    RD3_bit
0x0F83       [0]    RD2_bit
0x0F8C       [0]    LATD6_bit
0x0F8C       [0]    LATD1_bit
0x0F8C       [0]    LATD7_bit
0x0F8C       [0]    LATD0_bit
0x0F92       [1]    TRISA
0x0F93       [1]    TRISB
0x0F95       [1]    TRISD
0x0FC0       [1]    ADCON2
0x0FC1       [1]    ADCON1
0x0FC2       [1]    ADCON0
0x0FD5       [0]    PSA_bit
0x0FD5       [0]    T0CS_bit
0x0FD5       [0]    TMR0ON_bit
0x0FD5       [0]    T08BIT_bit
0x0FD6       [1]    TMR0L
0x0FD7       [1]    TMR0H
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [0]    TMR0IF_bit
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
